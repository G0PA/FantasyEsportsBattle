@using FantasyEsportsBattle.Web.Data
@using FantasyEsportsBattle.Web.Data.Models.Tournament
@using Microsoft.EntityFrameworkCore;
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager

<h1>My Tournaments:</h1>

<MatTable AllowSelection="true" Striped="true" ShowPaging="false" Items="@PlayerTournaments" class="mat-elevation-z5" SelectionChanged="SelectionChangedEvent">
    <MatTableHeader>
        <th>Name</th>
        <th>Participants</th>
        <th>Tournament Type</th>
        <th>Algorithm Type</th>
        <th>Regions Included In Tournament</th>
        <th>Host</th>
    </MatTableHeader>
    <MatTableRow>
        <td href='Identity/Tournament/@context.Id'>@context.Name</td>
        <td>@String.Format("{0}/{1}", @context.ApplicationUserTournaments == null ? 0 : @context.ApplicationUserTournaments.ToList().Count(), @context.MaxParticipants)</td>
        <td>@context.TournamentType</td>
        <td>@context.TournamentAlgorithm</td>
        <td>@String.Format("({0}) {1}", @context.TournamentCompetitions.Count(), @String.Join(",", @context.TournamentCompetitions.Select(tc => tc.Competition.Name)))</td>
        <td>@context.TournamentHost.UserName</td>
    </MatTableRow>
</MatTable>

@code {

    SpecificTournament SpecificTournament = new SpecificTournament();
    public bool IsOpen { get; set; }
    public List<Tournament> PlayerTournaments { get; set; }
    public Tournament SelectedTournament { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var userId = AuthProvider.GetAuthenticationStateAsync().Result.User.Claims.FirstOrDefault().Value;
        if (DbContext.Tournaments.Any())
        {
            PlayerTournaments = DbContext.Tournaments.Where(t => t.ApplicationUserTournaments != null && t.ApplicationUserTournaments.ToList().Any(aut => aut.ApplicationUserId == userId)).ToList();
        }
    }

    public void UpdatePlayerTournaments()
    {
        var userId = AuthProvider.GetAuthenticationStateAsync().Result.User.Claims.FirstOrDefault().Value;
        if (DbContext.Tournaments.Any())
        {
            PlayerTournaments = DbContext.Tournaments.Where(t => t.ApplicationUserTournaments != null && t.ApplicationUserTournaments.ToList().Any(aut => aut.ApplicationUserId == userId)).ToList();
        }

        StateHasChanged();
    }

    public void SelectionChangedEvent(object tournament)
    {
        if (tournament != null)
        {

            SelectedTournament = (Tournament)tournament;
            IsOpen = !IsOpen;
            NavigationManager.NavigateTo($"/Identity/Tournament/{SelectedTournament.Id}");
        }
    }

}

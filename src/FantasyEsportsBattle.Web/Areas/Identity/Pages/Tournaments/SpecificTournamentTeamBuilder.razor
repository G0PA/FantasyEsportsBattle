@inject ApplicationDbContext dbContext
@inject IJSRuntime JS;
@inject AuthenticationStateProvider AuthProvider
@using FantasyEsportsBattle.Web.Data.Models
@using FantasyEsportsBattle.Web.Data.Models.Tournament
@using FantasyEsportsBattle.Web.Data
@using FantasyEsportsBattle.Web.Extensions 

<style>
    .host {
        color: red !important;
        font-family: serif
    }

    .inTournament {
        color: darkgreen !important;
        font-family: serif
    }

    .invited {
        color: gray !important;
        font-family: serif
    }

    .text {
        font-family: serif;
        color: GrayText;
    }

    .playerList {
        margin-top: 3%;
    }
</style>

<AuthorizeView>
    <Authorized>
        @foreach (var player in OrderedPlayers)
        {
            <h3 class="mat-subtitle1">@GetPlayerNameAndPoints(player)</h3>
            <MatProgressBar Progress="@CalculateProgressBarValue(player.Value)"></MatProgressBar>
        }
    </Authorized>
    <NotAuthorized>
        <h2>Please login to view Tournament</h2>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public string TournamentId { get; set; }
    public Tournament Tournament { get; set; }
    public Dictionary<CompetitionPlayer,float> OrderedPlayers { get; set; }
    List<ApplicationUser> UsersInTournament { get; set; }
    public bool IsTournamentHost { get; set; }
    public bool IsFormDisabled
    {
        get
        {
            return Tournament.ApplicationUserTournaments.Count >= Tournament.MaxParticipants ||
                Tournament.TournamentHost != User;
        }
    }
    public bool IsPlayerAlreadyInvited { get; set; }
    public bool IsPlayerAlreadyInTournament { get; set; }
    public string InvitedUser { get; set; }
    public ApplicationUser User { get; set; }

    MatNavMenu navMenu;

    protected override async Task OnInitializedAsync()
    {
        var userId = AuthProvider.GetAuthenticationStateAsync().Result.User.Claims?.FirstOrDefault()?.Value;

        User = dbContext.Users.FirstOrDefault(u => u.Id == userId);

        var parsedTournamentId = int.Parse(TournamentId);

        Tournament = dbContext.Tournaments.FirstOrDefault(t => t.Id == parsedTournamentId);

        IsTournamentHost = Tournament.TournamentHost.Id == userId;
        UsersInTournament = Tournament.ApplicationUserTournaments.Select(t => t.ApplicationUser).ToList();
        OrderedPlayers = Tournament.CalculatePointsForAllPlayers();
    }

    private float CalculateProgressBarValue(float playerPoints)
    {
        var maxPoints = TournamentExtensions.GetMaxPoints();
        var onePercent = (float) (maxPoints) / 100;

        return (playerPoints / onePercent) /100;
    }

    private string GetPlayerNameAndPoints(KeyValuePair<CompetitionPlayer,float> player)
    {
        return $"{player.Key.Nickname} ({player.Value.ToString("F2")})";
    }
}

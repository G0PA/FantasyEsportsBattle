@inject ApplicationDbContext dbContext
@inject IJSRuntime JS;
@inject AuthenticationStateProvider AuthProvider
@using FantasyEsportsBattle.Models;
@using FantasyEsportsBattle.Models.Tournament;
@using FantasyEsportsBattle.Web.Data
@using FantasyEsportsBattle.Enumerations; 
@using FantasyEsportsBattle.Web.Extensions
@inject TournamentService TourneyService

<style>
    .host {
        color: red !important;
        font-family: serif
    }

    .inTournament {
        color: darkgreen !important;
        font-family: serif
    }

    .invited {
        color: gray !important;
        font-family: serif
    }

    .text {
        font-family: serif;
        color: GrayText;
    }

    .playerList {
        margin-top: 3%;
    }

    .buyPlayer {
        margin-top: 10px;
        margin-left: 20px;
    }

    .playerNick{
        font-family: 'Times New Roman', Times, serif;
        text-decoration: solid
    }
    .teamName {
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
        text-decoration: solid;
        color: burlywood
    }
    .pointsVeryHigh{
        font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
        color: coral
    }
    .pointsHigh {
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
        color: purple
    }
    .pointsAboveAverage {
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
        color: blue
    }
    .pointsAverage {
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
        color: green
    }
    .pointsBelowAverage {
        font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;
        color: gray
    }

    .demo-mat-card{
        max-width: 300px;
        background-color: burlywood;
    }

    .demo-mat-card-disabled {
        max-width: 300px;
        background-color: gray
    }

    .demo-mat-card-reserve {
        max-width: 300px;
        margin-top: 1%;
        background-color: mediumpurple
    }

    .demo-mat-card-content {
        padding: 1rem;
    }

    .demo-mat-card-clean-margin {
        margin: 0px;
    }
    span.player {
        width: 20%;
        display: inline-block;
    }
</style>

<AuthorizeView>
    <Authorized>
        <span>
            @foreach (var role in Enum.GetValues(typeof(Role)))
            {
                var roleParsed = (Role)role;
                <span class="player">
                    @if (UserTournamentStats.BoughtPlayers != null && UserTournamentStats.BoughtPlayers.Any(bp => bp.CompetitionPlayer.Role == roleParsed && !bp.IsReserve))
                    {
                        var player = UserTournamentStats.BoughtPlayers.FirstOrDefault(bp => bp.CompetitionPlayer.Role == roleParsed && !bp.IsReserve);

                        <MatCard class="demo-mat-card">
                            <MatCardContent>
                                <div class="demo-mat-card-content">
                                    <MatHeadline6 class="demo-mat-card-clean-margin">
                                        @roleParsed
                                        <img src="@GetRoleIconSource(roleParsed)" height="40px" width="40px" />
                                    </MatHeadline6>
                                    <MatSubtitle2 class="demo-mat-card-clean-margin">
                                        <MatHeadline6 class="demo-mat-card-clean-margin">
                                            @String.Format("{0}({1})", player.CompetitionPlayer.Nickname, BoughtCompetitionPlayers.FirstOrDefault(bp => bp.Key == player.CompetitionPlayer).Value.ToString("F2"))
                                        </MatHeadline6>
                                    </MatSubtitle2>
                                </div>
                            </MatCardContent>

                        </MatCard>
                    }
                    @if (UserTournamentStats.BoughtPlayers != null && !UserTournamentStats.BoughtPlayers.Any(bp => bp.CompetitionPlayer.Role == roleParsed && !bp.IsReserve))
                    {
                        <MatCard class="demo-mat-card-disabled">
                            <MatCardContent>
                                <div class="demo-mat-card-content">
                                    <MatHeadline6 class="demo-mat-card-clean-margin">
                                        @roleParsed
                                        <img src="@GetRoleIconSource(roleParsed)" height="40px" width="40px" />
                                    </MatHeadline6>
                                    <MatSubtitle2 class="demo-mat-card-clean-margin">
                                        <MatHeadline6>@String.Format("You currently have no {0} player", roleParsed)</MatHeadline6>
                                    </MatSubtitle2>
                                </div>
                            </MatCardContent>

                        </MatCard>
                    }
                    @if (UserTournamentStats.BoughtPlayers != null)
                    {
                        @foreach (var reserve in UserTournamentStats.BoughtPlayers.Where(bp => bp.IsReserve && bp.CompetitionPlayer.Role == roleParsed))
                        {
                            <MatCard class="demo-mat-card-reserve">
                                <MatCardContent>
                                    <div class="demo-mat-card-content">
                                        <MatHeadline6 class="demo-mat-card-clean-margin">
                                            @String.Format("{0} (RESERVE)", reserve.CompetitionPlayer.Role)
                                            <img src="@GetRoleIconSource(reserve.CompetitionPlayer.Role)" height="40px" width="40px" />
                                        </MatHeadline6>
                                        <MatSubtitle2 class="demo-mat-card-clean-margin">
                                            <MatHeadline6 class="demo-mat-card-clean-margin">
                                                @String.Format("{0}({1})", reserve.CompetitionPlayer.Nickname, BoughtCompetitionPlayers.FirstOrDefault(bp => bp.Key == reserve.CompetitionPlayer).Value.ToString("F2"))
                                            </MatHeadline6>
                                        </MatSubtitle2>
                                    </div>
                                </MatCardContent>
                            </MatCard>
                        }
                    }
                </span>
            }
        </span>
        <div></div>
            <MatNavMenu Style="margin-top: 10%">
                <MatNavSubMenu>
                    <MatNavSubMenuHeader Title="Players">
                        <MatNavItem AllowSelection="false">
                            <MatIcon Icon="person" />&nbsp;Players(@OrderedPlayers.Count)
                        </MatNavItem>
                    </MatNavSubMenuHeader>
                    <MatNavSubMenuList>
                        <MatChipSet Filter="true" @bind-SelectedChips="RoleFilterChips">
                            <MatChip Label="TOP" IsCheckable="true"></MatChip>
                            <MatChip Label="JUNGLE" IsCheckable="true"></MatChip>
                            <MatChip Label="MID" IsCheckable="true"></MatChip>
                            <MatChip Label="ADC" IsCheckable="true"></MatChip>
                            <MatChip Label="SUPPORT" IsCheckable="true"></MatChip>
                            <MatChip Style="background-color: green" Label="SHOW ONLY ELIGIBLE" IsCheckable="true"></MatChip>
                        </MatChipSet>
                        <MatAutocompleteList ShowClearButton="true" @bind-Value="@PlayerSearch" Items="@OrderedPlayers.Keys" Icon="search" TItem="CompetitionPlayer" Label="Filter by Name"></MatAutocompleteList>
                    </MatNavSubMenuList>
                    <MatNavSubMenuList>
                        @foreach (var player in OrderedPlayersFiltered)
                        {
                            <h3>
                                <span class="playerNick">
                                    <img src="@GetRoleIconSource(player.Key.Role)" width="35" height="35" />
                                    @player.Key.Nickname
                                    <span class="teamName">@String.Format("[{0}]", player.Key.Team.Name)</span>
                                    [@player.Key.Team.Competition.Name]
                                    @if (player.Value >= 90)
                                    {
                                        <span class="pointsVeryHigh"> (@player.Value.ToString("F2"))</span>
                                    }
                                    @if (player.Value >= 75 && player.Value < 90)
                                    {
                                        <span class="pointsHigh"> (@player.Value.ToString("F2"))</span>
                                    }
                                    @if (player.Value >= 60 && player.Value < 75)
                                    {
                                        <span class="pointsAboveAverage"> (@player.Value.ToString("F2"))</span>
                                    }
                                    @if (player.Value >= 50 && player.Value < 60)
                                    {
                                        <span class="pointsAverage"> (@player.Value.ToString("F2"))</span>
                                    }
                                    @if (player.Value >= 1 && player.Value < 50)
                                    {
                                        <span class="pointsBelowAverage"> (@player.Value.ToString("F2"))</span>
                                    }
                                    <MatThemeProvider Theme="@buyPlayerTheme">
                                        <MatButton Raised="true" Disabled="@DisabledPlayers.Contains(player.Key)" Class="buyPlayer" Icon="@MatIconNames.Payment" OnClick="@(_ => OnClickBuy(player))" Label="BUY"></MatButton>
                                    </MatThemeProvider>
                                </span>
                            </h3>
                            <MatProgressBar Progress="@CalculateProgressBarValue(player.Value)"></MatProgressBar>
                        }
                    </MatNavSubMenuList>

                </MatNavSubMenu>
            </MatNavMenu>



        <MatDialog @bind-IsOpen="@IsBuyPlayerFormOpen">
            <MatDialogContent>
                <MatDialogTitle> @SelectedPlayer.Key.Nickname (@SelectedPlayer.Value.ToString("F2")) <img src="@GetRoleIconSource(SelectedPlayer.Key.Role)" width="60" height="60" /></MatDialogTitle>
                <h5>Winrate: @SelectedPlayer.Key.Winrate %(@SelectedPlayer.Key.Wins - @SelectedPlayer.Key.Losses)</h5>
                <h5>KDA: @SelectedPlayer.Key.KDA</h5>
                <h5>CS Per Minute: @SelectedPlayer.Key.CSPM</h5>
                <h5>Gold Per Minute: @SelectedPlayer.Key.GPM</h5>
                <h5>Ahead In CS At 15:00 Percent: @SelectedPlayer.Key.AheadInCSAt15MinPercent %</h5>
                <h5>Kill Participation Percent: @SelectedPlayer.Key.KillParticipationPercent %</h5>
                <h5>CS Difference At 15:00: @SelectedPlayer.Key.CSDifferenceAt15Min </h5>
                <h5>Gold Difference At 15:00: @SelectedPlayer.Key.GoldDifferenceAt15Min </h5>
                <h5>XP Difference At 15:00: @SelectedPlayer.Key.XPDifferenceAt15Min </h5>
                <h5>Damage Percent: @SelectedPlayer.Key.DamagePercent %</h5>
                <h5>VisionScorePerMinute: @SelectedPlayer.Key.VisionScorePerMinute</h5>
                <MatDialogActions>
                    <MatButton OnClick="@TryBuyPlayer">Buy</MatButton>
                    <MatButton OnClick="@(e => { IsBuyPlayerFormOpen = false; })">Exit</MatButton>
                </MatDialogActions>
            </MatDialogContent>
            <MatSnackbar @bind-IsOpen="@PlayerBoughtSuccess">
                <MatSnackbarContent>Player Bought Successfully! New Gold balance is @UserTournamentStats.Currency.ToString("F2")</MatSnackbarContent>
                <MatSnackbarActions>
                    <MatButton OnClick="@(e => { IsBuyPlayerFormOpen = false; })" Raised="true">OK</MatButton>
                </MatSnackbarActions>
            </MatSnackbar>
            <MatSnackbar @bind-IsOpen="@NotEnoughGold">
                <MatSnackbarContent>Player Invite failed. You do not have enough Gold</MatSnackbarContent>
            </MatSnackbar>
            <MatSnackbar @bind-IsOpen="@TooManyPlayersFromTeam">
                <MatSnackbarContent>@String.Format("Player Invite failed. You already have the max number of allowed Players from {0} in your roster", SelectedPlayer.Key.Team == null ? "Unknown" : SelectedPlayer.Key.Team.Name) </MatSnackbarContent>
            </MatSnackbar>
            <MatSnackbar @bind-IsOpen="@PlayerAlreadyBought">
                <MatSnackbarContent>You already have @SelectedPlayer.Key.Nickname in your roster</MatSnackbarContent>
            </MatSnackbar>
        </MatDialog>

    </Authorized>
    <NotAuthorized>
        <h2>Please login to view Tournament</h2>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public string TournamentId { get; set; }
    public Tournament Tournament { get; set; }
    public Dictionary<CompetitionPlayer, float> OrderedPlayers { get; set; }
    public Dictionary<CompetitionPlayer, float> OrderedPlayersFiltered { get; set; }
    List<ApplicationUser> UsersInTournament { get; set; }
    public bool IsTournamentHost { get; set; }
    public bool ShowEligibleOnly { get; set; }
    private CompetitionPlayer _playerSearch;
    public CompetitionPlayer PlayerSearch { get { return _playerSearch; } set
        {
            _playerSearch = value;

            if (value != null)
            {
                OrderedPlayersFiltered.Clear();

                OrderedPlayersFiltered.Add(value, OrderedPlayers.FirstOrDefault(t => t.Key == value).Value);

                StateHasChanged();
            }
            else
            {
                ApplyCurrentFilters();
            }
        } }
    private MatChip[] _roleFilterChips;
    public MatChip[] RoleFilterChips
    {
        get { return _roleFilterChips; }
        set
        {
            _roleFilterChips = value;

            RoleFilters.Clear();
            foreach (var filter in RoleFilterChips.ToList().Where(rfc => rfc.IsSelected))
            {
                if(filter.Label.Contains("ELIGIBLE"))
                {
                    ShowEligibleOnly = true;
                    continue;
                }

                var role = (Role)Enum.Parse(typeof(Role), filter.Label);

                RoleFilters.Add(role);
            }

            if(RoleFilterChips.All(rfc => !rfc.Label.Contains("ELIGIBLE")))
            {
                ShowEligibleOnly = false;
            }

            ApplyCurrentFilters();
        }
    }
    public bool IsFormDisabled
    {
        get
        {
            return Tournament.ApplicationUserTournaments.Count >= Tournament.MaxParticipants ||
                Tournament.TournamentHost != User;
        }
    }
    public bool RosterOpen { get; set; } = true;
    public bool IsPlayerAlreadyInvited { get; set; }
    public bool IsPlayerAlreadyInTournament { get; set; }
    public string InvitedUser { get; set; }
    public KeyValuePair<CompetitionPlayer, float> SelectedPlayer { get; set; } = new KeyValuePair<CompetitionPlayer, float>(new CompetitionPlayer(), 0);
    public ApplicationUser User { get; set; }
    public TournamentStats UserTournamentStats { get; set; }
    public bool IsBuyPlayerFormOpen { get; set; }
    public bool PlayerAlreadyBought { get; set; }
    public bool TooManyPlayersFromTeam { get; set; }
    public bool NotEnoughGold { get; set; }
    public bool PlayerBoughtSuccess { get; set; }
    public Dictionary<Team,byte[]> Teams { get; set; }
    private HashSet<Role> RoleFilters { get; set; }
    private Dictionary<CompetitionPlayer,float> BoughtCompetitionPlayers { get; set; } = new Dictionary<CompetitionPlayer, float>();
    private HashSet<CompetitionPlayer> DisabledPlayers { get; set; } = new HashSet<CompetitionPlayer>();
    MatNavMenu navMenu;
    MatTheme buyPlayerTheme = new MatTheme()
    {
        Primary = "green",
        Secondary = "orange"
    };

    [Parameter] public Action UpdateTournamentState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var userId = AuthProvider.GetAuthenticationStateAsync().Result.User.Claims?.FirstOrDefault()?.Value;

        User = dbContext.Users.FirstOrDefault(u => u.Id == userId);

        var parsedTournamentId = int.Parse(TournamentId);

        Tournament = dbContext.Tournaments.FirstOrDefault(t => t.Id == parsedTournamentId);

        IsTournamentHost = Tournament.TournamentHost.Id == userId;
        UsersInTournament = Tournament.ApplicationUserTournaments.Select(t => t.ApplicationUser).ToList();
        OrderedPlayers = Tournament.CalculatePointsForAllPlayers();
        OrderedPlayersFiltered = OrderedPlayers.ToDictionary(op => op.Key, op => op.Value);
        UserTournamentStats = User.TournamentStatuses.FirstOrDefault(ts => ts.Tournament == Tournament);

        Teams = TourneyService.GetTeamImagesForCompetitions(Tournament.TournamentCompetitions.Select(c => c.Competition).ToList());

        RoleFilters = new HashSet<Role>();

        UpdateBoughtPlayers();
        UpdateDisabledPlayers();
    }

    private void UpdateDisabledPlayers()
    {
        DisabledPlayers.Clear();

        foreach(var player in OrderedPlayers)
        {
            if (BuyPlayerDisabled(player))
            {
                DisabledPlayers.Add(player.Key);
            }
        }
    }
    private float CalculateProgressBarValue(float playerPoints)
    {
        var maxPoints = TournamentExtensions.GetMaxPoints();
        var onePercent = (float)(maxPoints) / 100;

        return (playerPoints / onePercent) / 100;
    }

    private object AddFilterByRole(Role role)
    {
        if (PlayerSearch != null)
        {
            PlayerSearch = null;
        }

        RoleFilters.Add(role);
        ApplyCurrentFilters();
        StateHasChanged();

        return this;
    }

    private void ApplyCurrentFilters()
    {
        if (RoleFilters.Any())
        {
            OrderedPlayersFiltered = OrderedPlayers.Where(op => RoleFilters.Contains(op.Key.Role)).ToDictionary(op => op.Key, op => op.Value);
        }
        else
        {
            OrderedPlayersFiltered = OrderedPlayers.ToDictionary(op => op.Key, op => op.Value);
        }

        if (ShowEligibleOnly)
        {
            OrderedPlayersFiltered = OrderedPlayersFiltered.Where(opf => !DisabledPlayers.Contains(opf.Key)).ToDictionary(op => op.Key, op => op.Value);
        }
    }

    private void OnClickBuy(KeyValuePair<CompetitionPlayer, float> player)
    {
        SelectedPlayer = player;
        IsBuyPlayerFormOpen = true;
        PlayerBoughtSuccess = false;
        NotEnoughGold = false;
        TooManyPlayersFromTeam = false;
        PlayerAlreadyBought = false;
    }
    private void TryBuyPlayer()
    {
        if (UserTournamentStats.BoughtPlayers.Any(p => p.CompetitionPlayer == SelectedPlayer.Key))
        {
            PlayerAlreadyBought = true;
        }
        else if (UserTournamentStats.Currency < SelectedPlayer.Value)
        {
            NotEnoughGold = true;
        } else if (UserTournamentStats.BoughtPlayers.Where(bp => bp.CompetitionPlayer.Team == SelectedPlayer.Key.Team).Count() >= 2)
        {
            TooManyPlayersFromTeam = true;
        }
        else
        {
            PlayerBoughtSuccess = true;

            foreach(var boughtPlayer in UserTournamentStats.BoughtPlayers.Where(tbp => tbp.CompetitionPlayer.Role == SelectedPlayer.Key.Role))
            {
                boughtPlayer.IsReserve = true;
            }

            dbContext.TournamentBoughtPlayers.Add(new TournamentBoughtPlayer
            {
                CompetitionPlayer = SelectedPlayer.Key,
                TournamentStats = UserTournamentStats,
            });

            UserTournamentStats.Currency -= SelectedPlayer.Value;

            UpdateBoughtPlayers();

            UpdateDisabledPlayers();

            dbContext.SaveChanges();
        }

        StateHasChanged();

        UpdateTournamentState.Invoke();
    }

    private bool BuyPlayerDisabled(KeyValuePair<CompetitionPlayer,float> player)
    {
        if (UserTournamentStats.BoughtPlayers != null && UserTournamentStats.BoughtPlayers.Any(p => p.CompetitionPlayer == player.Key))
        {
            return true;
        }
        else if (UserTournamentStats.Currency < player.Value)
        {
            return true;
        }
        else if (UserTournamentStats.BoughtPlayers != null && UserTournamentStats.BoughtPlayers.Where(bp => bp.CompetitionPlayer.Team == player.Key.Team).Count() >= 2)
        {
            return true;
        }

        return false;
    }

    private void UpdateBoughtPlayers()
    {
        if(UserTournamentStats.BoughtPlayers == null)
        {
            return;
        }

        BoughtCompetitionPlayers.Clear();

        foreach (var boughtPlayer in UserTournamentStats.BoughtPlayers)
        {
            var orderedBoughtPlayer = OrderedPlayers.FirstOrDefault(op => op.Key == boughtPlayer.CompetitionPlayer);

            BoughtCompetitionPlayers.Add(orderedBoughtPlayer.Key, orderedBoughtPlayer.Value);
        }
    }

    private float GetTeamPoints(Team team)
    {
        float points = 0;
        foreach(var player in team.Players)
        {
            points += OrderedPlayers.FirstOrDefault(op => op.Key.Team == team).Value;
        }

        return points;
    }

    private string GetRoleIconSource(Role role)
    {
        return $"Images/LeaguePositionIcons/{role.ToString()}.png";
    }

    private void ClickRoster()
    {
        RosterOpen = !RosterOpen;
    }

    private string GetIconForDrawer()
    {
        return RosterOpen ? "arrow_back_ios" : "arrow_forward_ios";
    }

    private string GetLabelForDrawer()
    {
        return RosterOpen ? "Hide My Player Roster" : "Open My Player Roster";
    }
}

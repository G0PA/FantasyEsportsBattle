@inject ApplicationDbContext dbContext
@inject IJSRuntime JS;
@inject AuthenticationStateProvider AuthProvider
@inject TournamentService TourneyService
@using FantasyEsportsBattle.Web.Data.Models
@using FantasyEsportsBattle.Web.Data.Models.Tournament
@using FantasyEsportsBattle.Web.Data

<style>
    .invitation {
        color: darkgreen !important;
        font-family: serif
    }
</style>

@if (AvailableTournaments.Any())
{
    <h1>Public Tournaments:</h1>

    <MatTable AllowSelection="true" PageSize="10" Striped="true" ShowPaging="true" Items="@AvailableTournaments" class="mat-elevation-z5">
        <MatTableHeader>
            <th>Name</th>
            <th>Participants</th>
            <th>Tournament Type</th>
            <th>Algorithm Type</th>
            <th>Starting Gold</th>
            <th>Tournament State</th>
            <th>Regions Included In Tournament</th>
            <th>Host</th>
            <th>Actions</th>
        </MatTableHeader>
        <MatTableRow>
            <td href='Identity/Tournament/@context.Id'>@context.Name</td>
            <td>@String.Format("{0}/{1}", @context.ApplicationUserTournaments == null ? 0 : @context.ApplicationUserTournaments.ToList().Count(), @context.MaxParticipants)</td>
            <td>@context.TournamentType</td>
            <td>@context.TournamentAlgorithm</td>
            <td>@context.StartingCurrency</td>
            <td>@context.TournamentState</td>
            <td>@String.Format("({0}) {1}", @context.TournamentCompetitions.Count(), @String.Join(",", @context.TournamentCompetitions.Select(tc => tc.Competition.Name)))</td>
            <td>@context.TournamentHost.UserName</td>
            <td>
                <MatFAB Value="" OnClick="@(_ => TryJoinTournament(@context))" Icon="@MatIconNames.Check_circle_outline" Label="JOIN TOURNAMENT"></MatFAB>
                <MatButtonLink Href="@String.Format("/Identity/Tournament/{0}",@context.Id)" Icon="@MatIconNames.Arrow_forward">VIEW TOURNAMENT</MatButtonLink>
            </td>
        </MatTableRow>
    </MatTable>
}

@if (!AvailableTournaments.Any())
{
    <h3>Currently there are no available public tournaments :(</h3>
}

<MatSnackbar @bind-IsOpen="@JoinedTournament">
    <MatSnackbarContent>Tournament Joined Successfully</MatSnackbarContent>
    <MatSnackbarActions>
        <MatButton Raised="true">OK</MatButton>
    </MatSnackbarActions>
</MatSnackbar>
<MatSnackbar @bind-IsOpen="@JoinTournamentFailed">
    <MatSnackbarContent>Failed to Join Tournament</MatSnackbarContent>
    <MatButton Raised="true">OK</MatButton>
</MatSnackbar>

@code {
    public ApplicationUser User { get; set; }
    [Parameter]
    public List<Tournament> AvailableTournaments { get; set; }
    public bool JoinTournamentFailed { get; set; }
    public bool JoinedTournament { get; set; }
    [Parameter] public EventCallback OnStateChanged { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var userId = AuthProvider.GetAuthenticationStateAsync().Result.User.Claims?.FirstOrDefault()?.Value;

        User = dbContext.Users.FirstOrDefault(u => u.Id == userId);
    }

    public void TryJoinTournament(Tournament tournament)
    {
        if (TourneyService.JoinTournament(tournament,User))
        {
            JoinedTournament = true;
        }
        else
        {
            JoinTournamentFailed = true;
        }

        OnStateChanged.InvokeAsync();
    }
}

@page "/Identity/Tournament/{tournamentId}"
@inject ApplicationDbContext dbContext
@inject IJSRuntime JS;
@inject AuthenticationStateProvider AuthProvider
@using FantasyEsportsBattle.Web.Data.Models
@using FantasyEsportsBattle.Web.Data.Models.Tournament
@using FantasyEsportsBattle.Web.Data

<style>
    .invite-user {
        right: 5%;
        position: absolute;
    }
    .startTournament {
        right: 5%;
        position: absolute;
    }
    .host {
        color: red !important;
        font-family: serif
    }
    .inTournament {
        color: darkgreen !important;
        font-family: serif
    }
    .invited {
        color: gray !important;
        font-family: serif
    }
    .text {
        font-family: serif;
        color: GrayText;
    }
    .playerList {
        margin-top: 3%;
    }
    .tournamentName{
        color: darkslateblue;
        font-family: 'Times New Roman', Times, serif;
        text-align: center;
    }
    .Tabs {
        margin-bottom: 3%;
    }
</style>

<AuthorizeView>
    <Authorized>
        <nav class="navbar navbar-expand-sm navbar-light navbar-toggleable-sm bg-dark border-bottom box-shadow mb-3">
            <h1 class="tournamentName">@Tournament.Name</h1>
            <h1 style="color: burlywood"> (@Tournament.TournamentState)</h1>
            <MatButton Icon="@MatIconNames.Monetization_on" Label="@User.TournamentStatuses.FirstOrDefault(ts => ts.Tournament == Tournament).Currency.ToString("F2")"></MatButton>
            <div class="mat-elevation-z4" style="margin-bottom: 5%;">
                <MatThemeProvider Theme="@theme1">
                    @if (Tournament.TournamentState == Enumerations.TournamentState.NotStarted)
                    {
                        @if (IsFormDisabled)
                        {
                            <MatTooltip Context="TooltipContext" Tooltip="@String.Format("Only {0} can invite players to this Tournament if Status is not started and there are empty slots", Tournament.TournamentHost.UserName)" Position="@MatTooltipPosition.Bottom">
                                <MatButton RefBack="TooltipContext" Icon="@MatIconNames.Lock" Raised="true" Class="invite-user">Invite User</MatButton>
                            </MatTooltip>
                        }
                        @if (!IsFormDisabled)
                        {
                            <MatButton Icon="@MatIconNames.Favorite" Raised="true" Class="invite-user" OnClick="@(() => OpenForm())">Invite User</MatButton>
                        }
                    }
                </MatThemeProvider>
            </div>
            <div class="mat-elevation-z4">
                @if (IsTournamentHost && Tournament.TournamentState == Enumerations.TournamentState.NotStarted)
                {
                    <MatThemeProvider Theme="@theme2">
                        <MatButton Icon="@MatIconNames.Launch" Raised="true" Class="startTournament" OnClick="@(() => IsBeginTournamentFormOpen = true)">BEGIN TOURNAMENT</MatButton>
                    </MatThemeProvider>
                }
            </div>
        </nav>
        @if (!IsPartOfTournament)
        {
            <h2 style="color: darkred">You are not currently a part of this tournament</h2>
        }
        <MatTabGroup @bind-ActiveIndex="@tabIndex">
            <MatTab Class="Tabs" Label="General Stats">
                <SpecificTournamentGeneralStats TournamentId="@TournamentId" />
            </MatTab>
            <MatTab Class="Tabs" Label="Team Builder">
                <SpecificTournamentTeamBuilder TournamentId="@TournamentId"/>
            </MatTab>
            <MatTab Class="Tabs" Label="Participants & Ladder">

            </MatTab>
        </MatTabGroup>

        <MatDialog @bind-IsOpen="@IsInviteFormOpen">
            <MatDialogTitle>Invite Player To Tournament </MatDialogTitle>
            <MatDialogContent>
                <MatTextField Label="Player Username" @bind-Value="@InvitedUser"></MatTextField>
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="@(e => { IsInviteFormOpen = false; })">Exit</MatButton>
                <MatButton Disabled="@IsFormDisabled" OnClick="@TryInvitePlayer">Invite</MatButton>
            </MatDialogActions>
            <MatSnackbar @bind-IsOpen="@IsPlayerInvited">
                <MatSnackbarContent>Player Invited to tournament Successfully</MatSnackbarContent>
                <MatSnackbarActions>
                    <MatButton OnClick="@(e => { IsInviteFormOpen = false; })" Raised="true">OK</MatButton>
                </MatSnackbarActions>
            </MatSnackbar>
            <MatSnackbar @bind-IsOpen="@IsPlayerInviteFailed">
                <MatSnackbarContent>Player Invite failed. User does not Exist</MatSnackbarContent>
            </MatSnackbar>
            <MatSnackbar @bind-IsOpen="@IsPlayerAlreadyInvited">
                <MatSnackbarContent>Player Is Already Invited to Tournament</MatSnackbarContent>
            </MatSnackbar>
            <MatSnackbar @bind-IsOpen="@IsPlayerAlreadyInTournament">
                <MatSnackbarContent>Player Is Already in this Tournament</MatSnackbarContent>
            </MatSnackbar>
        </MatDialog>

        <MatDialog @bind-IsOpen="@IsBeginTournamentFormOpen">
            <MatDialogTitle>Are You Sure you want to Begin Tournament? No more Players can be invited and the Tournament will begin on the next Monday 00:00 UTC </MatDialogTitle>
            <MatDialogActions>
                <MatButton OnClick="@(e => { BeginTournament(); })">BEGIN TOURNAMENT</MatButton>
                <MatButton OnClick="@(e => { IsBeginTournamentFormOpen = false; })">Exit</MatButton>
            </MatDialogActions>
            <MatSnackbar @bind-IsOpen="@IsTournamentStartSuccessful">
                <MatSnackbarContent>Tournament Started Successfully!</MatSnackbarContent>
            </MatSnackbar>
        </MatDialog>

    </Authorized>
    <NotAuthorized>
        <h2>Please login to view Tournament</h2>
    </NotAuthorized>
</AuthorizeView>

@code {

    [Parameter]
    public string TournamentId { get; set; }
    public Tournament Tournament { get; set; }
    List<ApplicationUser> UsersInTournament { get; set; }
    public bool ShouldLoad { get; set; }
    public bool IsTournamentHost { get; set; }
    public bool IsInviteFormOpen { get; set; }
    public bool IsPlayerInviteFailed { get; set; }
    public bool IsPlayerInvited { get; set; }
    public bool IsBeginTournamentFormOpen { get; set; }
    public bool IsTournamentStartSuccessful { get; set; }
    public int tabIndex = 0;
    MatTheme theme1 = new MatTheme()
    {
        Primary = MatThemeColors.Indigo._500.Value,
        Secondary = MatThemeColors.BlueGrey._500.Value,
    };
    MatTheme theme2 = new MatTheme()
    {
        Primary = MatThemeColors.Red._500.Value,
        Secondary = "#fafafa",
    };
    public bool IsFormDisabled { get
        {
            return Tournament.ApplicationUserTournaments.Count >= Tournament.MaxParticipants ||
                Tournament.TournamentHost != User;
        }
    }
    public bool IsPlayerAlreadyInvited { get; set; }
    public bool IsPlayerAlreadyInTournament { get; set; }
    public string InvitedUser { get; set; }
    public ApplicationUser User { get; set; }
    public bool IsPartOfTournament { get
        {
            return Tournament.ApplicationUserTournaments.Any(aut => aut.ApplicationUser == User);
        } }
    public string PlayersInTournamentTitle
    {
        get
        {
            return String.Format("Players In Tournament {0}/{1}", UsersInTournament.Count, Tournament.MaxParticipants);
        }
    }

    MatNavMenu navMenu;

    protected override async Task OnInitializedAsync()
    {
        var userId = AuthProvider.GetAuthenticationStateAsync().Result.User.Claims?.FirstOrDefault()?.Value;

        User = dbContext.Users.FirstOrDefault(u => u.Id == userId);

        var parsedTournamentId = int.Parse(TournamentId);

        Tournament = dbContext.Tournaments.FirstOrDefault(t => t.Id == parsedTournamentId);


        IsTournamentHost = Tournament.TournamentHost.Id == userId;
        UsersInTournament = Tournament.ApplicationUserTournaments.Select(t => t.ApplicationUser).ToList();
    }

    public async Task TryInvitePlayer()
    {
        var userId = AuthProvider.GetAuthenticationStateAsync().Result.User.Claims.FirstOrDefault().Value;
        var user = dbContext.Users.FirstOrDefault(u => u.Id == userId);
        var invitedUser = dbContext.Users.ToList().FirstOrDefault(u => u.UserName.ToLowerInvariant() == InvitedUser.ToLowerInvariant());

        if (Tournament.TournamentInvitations == null)
        {
            Tournament.TournamentInvitations = new List<TournamentInvitation>();
        }
        if (invitedUser == null)
        {
            IsPlayerInviteFailed = true;
        }
        else if (Tournament.ApplicationUserTournaments.ToList().Any(aut => aut.ApplicationUser == invitedUser))
        {
            IsPlayerAlreadyInTournament = true;
        }
        else if (Tournament.TournamentInvitations.All(ti => ti.InvitedUser != invitedUser))
        {
            Tournament.TournamentInvitations.Add(new TournamentInvitation
            {
                InvitedUser = invitedUser,
                Tournament = Tournament,
                InvitationSenderUserId = userId,
            });

            dbContext.SaveChanges();

            IsPlayerInvited = true;
        }
        else
        {
            IsPlayerAlreadyInvited = true;
        }
    }

    public void OpenForm()
    {
        IsInviteFormOpen = true;
    }

    public void BeginTournament()
    {
        Tournament.TournamentState = Enumerations.TournamentState.Started;
        IsTournamentStartSuccessful = true;
        dbContext.SaveChanges();
        StateHasChanged();
    }
}
